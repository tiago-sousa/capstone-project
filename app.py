# Initialization code DBN__
import os
import json
import pickle
import joblib
import pandas as pd
from flask import Flask, jsonify, request
from peewee import (
    BooleanField, Model, IntegerField, FloatField,
    TextField, IntegrityError
)
from playhouse.shortcuts import model_to_dict
from playhouse.db_url import connect
from utils import custom_transformers

# Initialization code

########################################
# Begin database stuff

# the connect function checks if there is a DATABASE_URL env var
# if it exists, it uses it to connect to a remote postgres db
# otherwise, it connects to a local sqlite db stored in predictions.db

DB = connect(os.environ.get('DATABASE_URL') or 'sqlite:///predictions.db')

class Prediction(Model):
    observation_id = TextField()
    observation = TextField()
    pred = BooleanField()
    proba = FloatField()
    label = BooleanField(null=True)

    class Meta:
        database = DB


DB.create_tables([Prediction], safe=True)

# End database stuff
########################################

########################################
# Unpickle the previously-trained model

#TMP_DIR = '/tmp'

#with open(os.path.join(TMP_DIR, 'columns.json'), 'r') as fh:
    #columns = json.load(fh)

#with open(os.path.join(TMP_DIR, 'dtypes.pickle'), 'rb') as fh:
    #dtypes = pickle.load(fh)
    
#pipeline = joblib.load(os.path.join(TMP_DIR, 'pipeline.pickle'))          
          
with open('columns.json', 'r') as fh:
    columns = json.load(fh)

with open('dtypes.pickle', 'rb') as fh:
    dtypes = pickle.load(fh)
    
pipeline = joblib.load('pipeline.pickle')          
          
          
# End model un-pickling
########################################

########################################
# Unit Tests
########################################
def check_request(request):
    """
        Validates that our request is well formatted
        
        Returns:
        - assertion value: True if request is ok, False otherwise
        - error message: empty if request is ok, False otherwise
    """
    
    if "id" not in request:
        request.update({"id": None})
        error = "Field `id` missing from request: {}".format(request)
        return False, error
    
    # if "data" not in request:
    #     error = "Field `data` missing from request: {}".format(request)
    #     return False, error
    
    return True, ""

########################################
# End Unit Tests
########################################

########################################
# Begin webserver stuff

app = Flask(__name__)

@app.route('/predict', methods=['POST'])

def predict():
    """
    Produce prediction for request.
    
    Inputs:
        request: dictionary with format described below
     
    Returns: A dictionary with predictions or an error, the two potential values:
                ```
                {
                    "observation_id": <id-of-request>,
                    "prediction": <True|False>,
                    "probability": <probability generated by model>
                }
                ```
                or 
                ```
                {
                    "observation_id": <id-of-request>,
                    "error": "some error message"
                }
                ```
                if success is False, return an error string
    """

    obs_dict = request.get_json()

    request_ok, error = check_request(obs_dict)
    
    if not request_ok:
        response = {"observation_id": None, 'error': error}
        print(response)
        return jsonify(response)
    
    _id = obs_dict['id']
    observation = obs_dict['observation']
    obs = pd.DataFrame([observation], columns=columns).astype(dtypes)
    proba = pipeline.predict_proba(obs)[0, 1]
    
    pred = pipeline.predict(obs)[0]
    print(pred)

    response = {"observation_id": _id, 'prediction': bool(pred)}
    print(response)
    
    p = Prediction(
        observation_id=_id,
        pred = bool(pred),
        proba=proba,
        observation=request.data
    )


    try:
       p.save()
    except IntegrityError:
        error_msg = "ERROR: Observation ID: '{}' already exists".format(_id)
        response["error"] = error_msg
        print(error_msg)
        DB.rollback()
    return jsonify(response)

@app.route('/update', methods=['POST'])
def update():
    obs = request.get_json()
    try:
        p = Prediction.get(Prediction.observation_id == obs['observation_id'])
        p.label = obs['label']
        p.save()
        
        select = {}
        for key in ['observation_id', 'label']:
            select[key] = model_to_dict(p)[key]

        return jsonify(select)
    except Prediction.DoesNotExist:
        error_msg = 'Observation ID: "{}" does not exist'.format(obs['observation_id'])
        return jsonify({'error': error_msg})


# @app.route('/list-db-contents')
# def list_db_contents():
#     return jsonify([
#         model_to_dict(obs) for obs in Prediction.select()
#     ])

# End webserver stuff
########################################

if __name__ == "__main__":
    app.run(debug=True)